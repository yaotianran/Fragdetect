file.exists(data.file)
message(sprintf('%s 5M metrics ...', length(regions$AB.5M)))
AB.5M.ma = collect_bin_sizeratio(frag, bins = regions$AB.5M, mc.cores = parameters.list$core)
message(sprintf('%s 100K metrics ...', length(regions$AB.100K)))
AB.100K.ma = collect_bin_sizeratio(frag, bins = regions$AB.100K, mc.cores = parameters.list$core)
dim(AB.5M.ma)
head(AB.5M.ma)
head(AB.100K.ma)
# size.ratio.df is a N x 3 float data frame
# N is length if 5M regions
# columns are short/media/long size fragments count ratio
size.ratio.df = GC_correct(AB.100K.ma, AB.5M.ma)
dim(size.ratio.df)
head(size.ratio.df)
dim(size.ratio.df)
c(1,2) + c(10, 11)
source('scripts/pseudo_code.R')
# size.ratio.df is a N x 3 float data frame
# N is length if 5M regions
# columns are short/media/long size fragments count ratio
size.ratio.df = GC_correct(AB.100K.ma, AB.5M.ma)
head(size.ratio.df)
data.file
save(AB.100K.ma, AB.5M.ma, size.ratio.df, file = data.file)
message('Save to ', data.file)
temp.ma = matrix(t(size.ratio.df), nrow = 1)
dim(temp.ma)
# # # # # # collect fragment size distrbution of each chromosome  # # # # # #
# dist.df is a 67-column headless data frame , each row is a chromosome arm. The value is distribution ratio
# column 1st-67th are 65-69bp, 70-74bp, ....., 396-400bp fragments count ratio in a chromosome arm.
message(sprintf('Collecting size distribution %s', bam.file))
data.file = sprintf('results/%s_chromosome_dist.RData', id)
dist.df = collect_bin_distribution(frag, bins = regions$AB.arm, mc.cores = parameters.list$core) # return dist.df
save(dist.df, file = data.file)
dim(dist.df)
temp.ma = matrix(t(dist.df), nrow = 1)
dist.ratio.ma = rbind(dist.ratio.ma, temp.ma)
dist.ratio.ma
dim(dist.ratio.ma)
head(dist.df)
dim(dist.df)
sample.existed.df
samples.df
sample.existed.df = rbind(sample.existed.df, samples.df[i, ])
sample.existed.df
samples.df[i, ]
samples.df
sample.existed.df
temp <- read_bam('~/sda1/报告模板位点信息产品手册/output.bam')
temp
temp.df = data.frame(temp)
head(temp.df)
temp.df = data.frame(frag) %>% dplyr::filter(strand %in% c('+', '-'))
head(temp.df)
temp.df %>% dplyr::filter(strand == '+') %>% select(start)
plus.df = temp.df %>% dplyr::filter(strand == '+')
head(plus.df)
minus.df = temp.df %>% dplyr::filter(strand == '-')
head(minus.df)
plus.df = temp.df %>% dplyr::filter(strand == '+') %>% select(seqnames, start)
minus.df = temp.df %>% dplyr::filter(strand == '-') %>% select(seqnames, end)
pos.df = rbind(plus.df, minus.df)
plus.df = temp.df %>% dplyr::filter(strand == '+') %>% select(seqnames, start) %>% dplyr::rename(pos = start)
minus.df = temp.df %>% dplyr::filter(strand == '-') %>% select(seqnames, end) %>% dplyr::rename(pos = start)
pos.df = rbind(plus.df, minus.df)
head(plus.df)
head(minus.df)
minus.df = temp.df %>% dplyr::filter(strand == '-') %>% select(seqnames, end) %>% dplyr::rename(pos = end)
pos.df = rbind(plus.df, minus.df)
pos.df = rbind(plus.df, minus.df) %>% arrange(seqnames, pos)
head(pos.df)
plus.df = temp.df %>% dplyr::filter(strand == '+') %>% select(seqnames, start, strand) %>% dplyr::rename(pos = start)
minus.df = temp.df %>% dplyr::filter(strand == '-') %>% select(seqnames, end, strand) %>% dplyr::rename(pos = end)
pos.df = rbind(plus.df, minus.df) %>% arrange(seqnames, pos)
head(pos.df)
pos.df %>% write_tsv('temp/pos.tsv', col_names = F)
head(temp.df)
temp.df %>% select(seqnames, start, end, strand) %>% write_tsv('temp/pos.tsv', col_names = F)
parameters.list
temp.ma = gtools::permutations(4, (parameters.list$motif_upstream + parameters.list$motif_downstream), c('A', 'T', 'C', 'G'), repeats.allowed = T)
temp.ma
temp.df = data.frame(X1 = apply(temp.ma, MARGIN = 1, FUN = paste0, collapse = ''), no.use = 0)
temp.df
motif.df = read_tsv('temp/motif.tsv', show_col_types = F)
head(motif.df)
motif.df = read_tsv('temp/motif.tsv', show_col_types = F, col_names = F)
head(motif.df)
temp.ma = gtools::permutations(4, 6, c('A', 'T', 'C', 'G'), repeats.allowed = T)
temp.df = data.frame(X1 = apply(temp.ma, MARGIN = 1, FUN = paste0, collapse = ''), no.use = 0)
dim(temp.df)
head(temp.df)
head(motif.df)
merged.df = merge(temp.df, motif.df, by = 'X1', all.x = T) %>% mutate(ratio = X2 / sum(X2))
dim(merged.df)
head(merged.df)
merged.df$ratio
temp.df
temp.df = data.frame(frag) %>% dplyr::filter(strand %in% c('+', '-'))
temp.df %>% select(seqnames, start, end, strand) %>% write_tsv('temp/pos.tsv', col_names = F)
genome.reference
parameters.list
head(temp.df)
frag
frag
table(strand(frag))
frag = frag[strand(frag) %in% c('+', '-')]
table(strand(frag))
gc.df = read_tsv('temp/gc.tsv', show_col_types = F, col_names = F)
gc.df
frag
collect_bin_sizeratio
collect_bin_sizeratio <- function(frag, bins, parameters) {
r = NA
temp.df = data.frame(frag) %>% dplyr::filter(strand %in% c('+', '-'))
temp.df %>% select(seqnames, start, end, strand) %>% write_tsv('temp/pos.tsv', col_names = F)
command.str = sprintf('python scripts/get_motif.py %s %s %s', genome.reference, upstream, downstream)
r = system(command.str, intern = T)
motif.df = read_tsv('temp/motif.tsv', show_col_types = F, col_names = F)
return(motif.df)
}
dim(AB.5M.ma)
bin = regions$AB.5M$chr2.p.1
fragments = frag
query = findOverlaps(fragments, bin)
head(query)
bin
table(subjectHits(query))
unique(queryHits(query))
# The Fragment Size Ratio or FSR, similar to the original fragmentation profile reported by DELFI [7], was
# generated using the short/intermediate/long fragments ratios except using different cutoffs:
# the short, intermediate and long fragments were defined as 65-150bp, 151-220bp and 221-400bp,
# according to the overall fragment lengths profile in our cohorts.
# get the following features for each bin: average fragment GC ratio,
..get.size.ratio <- function(bin, fragments, i, j) {
query = findOverlaps(fragments, bin)
if (length(queryHits(query)) == 0) {  # if no hits
result = c(gc = NA, short = 0, medium = 0, long = 0, n = 0)
return(result)
}
fragments.hits = fragments[unique(queryHits(query))]  # collect the fragments in the bin
#  the short, intermediate and long fragments were defined as 65-150bp, 151-220bp and 221-400bp
fragments.hits = fragments.hits[65 <= width(fragments.hits) & width(fragments.hits) <= 400]
fragments.hits$class = 'short'
fragments.hits$class[width(fragments.hits) >= i] = 'medium'
fragments.hits$class[width(fragments.hits) >= j] = 'long'
gc.total = mean(fragments.hits$GC)
n = length(fragments.hits)
short = length(fragments.hits[fragments.hits$class == 'short'])
medium = length(fragments.hits[fragments.hits$class == 'medium'])
long = length(fragments.hits[fragments.hits$class == 'long'])
result = c(gc = gc.total, short = short, medium = medium, long = long, n = n)
return(result)
}
regions[[1:2]]
regions[1:2
]
regions$AB.5M[1:2]
temp = regions$AB.5M[1:20]
temp.list = bettermc::mclapply(temp, FUN = ..get.size.ratio, frag, i = 151, j = 221, mc.cores = 2)
temp
length(temp.list)
temp.list$chr1.p.1
bin.ma = do.call(rbind, temp.list)
bin.ma
cutoff.c = c(65, 151, 221)
cutoff.c = c(65, 151, 221, 401)
length(fragments.hits)
fragments.hits = fragments[unique(queryHits(query))]  # collect the fragments in the bin
length(fragments.hits)
h = hist(width(fragments.hits), breaks = c(65, 151, 221, 401))
width(fragments.hits)
h = hist(width(fragments.hits), breaks = c(65, 151, 221, 401))
sum(is.na(width(fragments.hits)))
h = hist(width(fragments.hits))
h$breaks
h = hist(width(fragments.hits), breaks = c(0, 65, 151, 221, 401, max(fragments.hits)))
h = hist(width(fragments.hits), breaks = c(0, 65, 151, 221, 401, max(width(fragments.hits))))
h$breaks
h$counts
h = hist(width(fragments.hits), breaks = c(0, 65, 151, 221, 401, max(width(fragments.hits))), plot = F)
h = hist(width(fragments.hits), breaks = c(0, 65, 151, 221, 401, max(width(fragments.hits))), plot = F, right = F)
h$counts
size.breaks = c(65, 151, 221)
breaks = c(0, size.breaks, max(width(fragments.hits)))
breaks.c = c(0, size.breaks, max(width(fragments.hits)))
h = hist(width(fragments.hits), breaks = breaks.c, plot = F, right = F)
h$counts
h$breaks
size.breaks = c(65, 151, 221, 401)
breaks.c = c(0, size.breaks, max(width(fragments.hits)))
h = hist(width(fragments.hits), breaks = breaks.c, plot = F, right = F)
h$breaks
h$counts
h$counts[2:]
h$counts[2:(length(h$counts) - 1)]
h$density
h$mids
h$xname
h$equidist
size.breaks
temp = fragments.hits[size.breaks[1] <= width(fragments.hits) & width(fragments.hits) < size.breaks[len(size.breaks)]]
temp = fragments.hits[size.breaks[1] <= width(fragments.hits) & width(fragments.hits) < size.breaks[length(size.breaks)]]
length(temp)
19510 =29791 = 2118
19510 +29791 + 2118
temp
h$counts
n = length(fragments.hits)
temp = fragments.hits[size.breaks[1] <= width(fragments.hits) & width(fragments.hits) < size.breaks[length(size.breaks)]]
gc.total = mean(temp$GC)
n = length(fragments.hits)
result = c(gc.total, count.c, n)
count.c = h$counts[2:(length(h$counts) - 1)]
result = c(gc.total, count.c, n)
result
size.breaks[-1]
size.breaks
parameters.list = read_parameters(PARAMETERS) # utils.R
parameters.list = read_parameters(PARAMETERS) # utils.R
str_extract_all(parameters.list$size.breaks, '\\d+')
breaks = str_extract_all(parameters$size.breaks, '\\d+')[[1]]
breaks = str_extract_all(parameters.list$size.breaks, '\\d+')[[1]]
breaks
as.integer(breaks)
breaks = as.integer(str_extract_all(parameters$size.breaks, '\\d+')[[1]])
breaks = as.integer(str_extract_all(parameters.list$size.breaks, '\\d+')[[1]])
breaks
# The Fragment Size Ratio or FSR, similar to the original fragmentation profile reported by DELFI [7], was
# generated using the short/intermediate/long fragments ratios except using different cutoffs:
# the short, intermediate and long fragments were defined as 65-150bp, 151-220bp and 221-400bp,
# according to the overall fragment lengths profile in our cohorts.
# get the following features for each bin: average fragment GC ratio,
..get.size.ratio <- function(bin, fragments, size.breaks) {
query = findOverlaps(fragments, bin)
if (length(queryHits(query)) == 0) {  # if no hits
result = c(gc = NA, short = 0, medium = 0, long = 0, n = 0)
return(result)
}
fragments.hits = fragments[unique(queryHits(query))]  # collect the fragments in the bin
#  the short, intermediate and long fragments were defined as 65-150bp, 151-220bp and 221-400bp
breaks.c = c(0, size.breaks, max(width(fragments.hits)))
h = hist(width(fragments.hits), breaks = breaks.c, plot = F, right = F)
count.c = h$counts[2:(length(h$counts) - 1)]
temp = fragments.hits[size.breaks[1] <= width(fragments.hits) & width(fragments.hits) < size.breaks[length(size.breaks)]]
gc.total = mean(temp$GC)
n = length(fragments.hits)
result = c(gc.total, count.c, n)
#result = c(gc = gc.total, short = short, medium = medium, long = long, n = n)
return(result)
}
core
core = 2
temp.list = bettermc::mclapply(bins, FUN = ..get.size.ratio, frag, size.breaks = breaks, mc.cores = core)
temp.list$chr1.p
bin.ma = do.call(rbind, temp.list)
bin.ma
h$counts
h$counts[2:-1]
h$counts[2:(length(h$counts) - 1)]
parameters.list = read_parameters(PARAMETERS) # utils.R
SIZE.BREAKS = as.integer(str_extract_all(parameters.list$size.breaks, '\\d+')[[1]])
SIZE.BREAKS
DIST.BREAKS = as.integer(str_extract_all(parameters.list$arms.distribution.breaks, '\\d+')[[1]])
DIST.BREAKS
parameters.list = read_parameters(PARAMETERS) # utils.R
DIST.BREAKS = as.integer(str_extract_all(parameters.list$arms.distribution.breaks, '\\d+')[[1]])
DIST.BREAKS
DIST.BREAKS = as.integer(str_extract_all(parameters.list$arms.distribution.breaks, '\\d+')[[1]])
DIST.BREAKS
parameters.list = read_parameters(PARAMETERS) # utils.R
DIST.BREAKS = as.integer(str_extract_all(parameters.list$arms.distribution.breaks, '\\d+')[[1]])
SIZE.BREAKS
SIZE.BREAKS
source('scripts/collect_bin_size_ratio.R')
AB.5M.ma = collect_bin_size_ratio(frag, bins = regions$AB.5M, breaks = SIZE.BREAKS, core = parameters.list$core)
temp
temp = regions$AB.5M[1:2]
temp
temp = regions$AB.5M[1:20]
temp.ma = collect_bin_size_ratio(frag, bins = temp, breaks = SIZE.BREAKS, core = parameters.list$core)
temp.ma
colSums(tmep.ma[, 2:4])
colSums(temp.ma[, 2:4])
rowSums(temp.ma[, 2:4])
dim(AB.5M.ma)
breaks
SIZE.BREAKS
temp.ma
dim(temp.ma)
temp.ma = matrix(c(1,NA, Inf,2,3,5), nrow = 3)
temp.ma
complete.cases(temp.ma)
x_train = runif(10000)
y_train = x_train ^ 2 + 3*x_train + runif(10000)
x_train = runif(10000) *10
y_train = x_train ^ 2 + 3*x_train + runif(10000)
plot(x_train, y_train)
y_train = x_train ^ 2 + 3*x_train + runif(10000)*10
plot(x_train, y_train)
x_train = runif(1000) *10
y_train = x_train ^ 1.5 + 3*x_train + runif(1000)*10
plot(x_train, y_train)
x = data.frame(x_train = x_train)
y = data.frame(y_train = y_train)
temp.df = merge(x, y, by = 0, all = F)
x_train = temp.df$x_train
names(x_train) = temp.df$Row.names
y_train = temp.df$y_train
names(y_train) = temp.df$Row.names
trend.train <- loess(y_train ~ x_train, data = temp.df, span = span)
span = 0.75
trend.train <- loess(y_train ~ x_train, data = temp.df, span = span)
i <- seq(min(x_train, na.rm = T), max(x_train, na.rm = T), length.out = 1000)
predict.train.c = predict(trend.train, i)
plot(x_train, y_train, cex = 0.3, pch = 20, xlab = 'GC ratio', ylab = 'Fragments ratio')
plot(x_train, y_train, cex = 0.3, pch = 20, xlab = 'GC ratio', ylab = 'Fragments ratio', main = 'Raw')
points(i, predict.train.c, cex = 0.5, pch = 20, col = 'blue')
trend.train.smooth <- loess(predict.train.c ~ i, span = span)
predict.smooth.c = predict(trend.train.smooth, i)
lines(i, predict.smooth.c, col = 'red', cex = 0.5)
plot(x_train, y_train, cex = 0.3, pch = 20, xlab = 'GC ratio', ylab = 'Fragments ratio', main = sprintf('%s Train Data', id))
plot(x_train, y_train, cex = 0.3, pch = 20, xlab = 'GC ratio', ylab = 'Fragments ratio', main = sprintf('%s (train data)', id))
points(i, predict.train.c, cex = 0.5, pch = 20, col = 'blue')
lines(i, predict(trend.train, i), col = 'blue', cex = 0.5)
trend.train.smooth <- loess(predict.train.c ~ i, span = span)
predict.smooth.c = predict(trend.train.smooth, i)
lines(i, predict.smooth.c, col = 'red', cex = 0.5)
bias <- predict(trend.train.smooth, x_predict)
x_predict = 1:10
bias <- predict(trend.train.smooth, x_predict)
bias
x_predict = 1:9
bias <- predict(trend.train.smooth, x_predict)
bias
points(x_predict, bias, col = 'red', cex = 0.7, pch = 20)
y_predict = x_predict ^ 1.5 + 3*x_predict + runif(10000)*10
y_predict = x_predict ^ 1.5 + 3*x_predict + runif(10000)*9
x_predict
y_predict = x_predict ^ 1.5 + 3*x_predict + runif(9)*10
y_corrected <- y_predict - bias + median(y_predict, na.rm = T)
trend.correct <- loess(y_corrected ~ x_predict, span = span)
predict.smooth.c = predict(trend.correct, i)
plot(x_predict, y_predict, cex = 0.3, pch = 21, xlab = 'GC ratio', ylab = 'Fragments ratio')
#points(x_predict, bias, col = 'red', cex = 0.5, pch = 20)
points(x_predict, y_corrected, col = 'blue', cex = 0.7, pch = 19)
lines(i, predict.smooth.c, col = 'red', lwd = 2)
plot(x_predict, y_predict, cex = 0.3, pch = 21, xlab = 'GC ratio', ylab = 'Fragments ratio', main = sprintf('%s (corrected)', id))
#points(x_predict, bias, col = 'red', cex = 0.5, pch = 20)
points(x_predict, y_corrected, col = 'blue', cex = 0.7, pch = 19)
lines(i, predict.smooth.c, col = 'red', lwd = 2)
temp.df
head(temp.df)
colnames(temp.df) = NULL
head(temp.df)
colnames(temp.df) = paste0('I', 1:ncol(temp.df))
head(temp.df)
dim(AB.100K.ma)
dim(AB.5M.ma)
source('scripts/GC_correct.R')
# size.ratio.df is a N x n-1 float data frame
# N is length if 5M regions
# columns are short/media/long size fragments count ratio
size.ratio.df = GC_correct(AB.100K.ma, AB.5M.ma)
bin_100K = AB.100K.ma
bin_5M = AB.5M.ma
ncol(bin_100K) != ncol(bin_5M)
output.df = data.frame(matrix(nrow = nrow(bin_5M), ncol = 0))
M = ncol(bin_100K) - 1
x_train = bin_100K[, 1]  # GC of train data
x_predict = bin_5M[, 1]  # GC of test data
M
i = 2
y_train = bin_100K[, i] / bin_100K[, ncol(bin_100K)] # ratio of train data
y_predict = bin_5M[, 1] / bin_100K[, ncol(bin_100K)] # ratio of test data
source('scripts/GC_correct.R')
frag = collect_fragment_GC(frag, genome.reference = REFERENCE) # add a column 'GC' (float)
AB.5M.ma = collect_bin_size_ratio(frag, bins = regions$AB.5M, breaks = SIZE.BREAKS, core = parameters.list$core)
# size.ratio.df is a N x n-1 float data frame
# N is length if 5M regions
# columns are short/media/long size fragments count ratio
size.ratio.df = GC_correct(AB.100K.ma, AB.5M.ma)
head(size.ratio.df)
source('scripts/GC_correct.R')
# size.ratio.df is a N x n-1 float data frame
# N is length if 5M regions
# columns are short/media/long size fragments count ratio
size.ratio.df = GC_correct(AB.100K.ma, AB.5M.ma)
dim(size.ratio.df)
DIST.BREAKS
dist.df = collect_bin_size_ratio(frag, bins = regions$AB.arm, breaks = DIST.BREAKS, core = parameters.list$core) # return dist.df
dist.df
size.ratio.df
dist.df
rownames(dist.df)
dist.df = dist.df[sort(rownames(dist.df)), ]
dist.df
dist.df = dist.df[, -1]
dist.df
dist.df = collect_bin_size_ratio(frag, bins = regions$AB.arm, breaks = DIST.BREAKS, core = parameters.list$core) # return dist.df
dist.df
dist.df = dist.df[sort(rownames(dist.df)), ]
temp.df = dist.df
temp.df
total.ma = temp.df[, ncol(temp.df)]
total.ma
temp.df
dist.ma = temp.df
dist.ma = dist.ma[, c(-1, -ncol(dist.ma))]
dist.ma
dist.ma / total.c
dist.ma / total.ma
total.ma
dist.ma = dist.ma / total.ma
colSums(dist.ma)
rowSums(dist.ma)
dist.ma
temp.ma = matrix(t(dist.ma), nrow = 1)
temp.ma[, 1:10]
regions$AB.arm
parameters.list
bin
data.frame(bin)
data.frame(bin) %>% select(seqnames, start, end)
dir.create('temp/cnv', showWarnings = F)
data.frame(bin) %>% select(seqnames, start, end) %>% write_tsv('temp/cnv/hic.bed', col_names = F)
data.frame(bin) %>% select(seqnames, start, end) %>% write_tsv('temp/cnv/hic.bed', col_names = F)
data.frame(regions$AB.500K) %>% select(seqnames, start, end) %>% write_tsv('temp/cnv/hic.bed', col_names = F)
data.frame(regions$AB.500K) %>% select(seqnames, start, end)
data.frame(regions$AB.500K)
regions$AB.500K
data.frame(regions$AB.1M) %>% select(seqnames, start, end) %>% write_tsv('temp/cnv/hic.bed', col_names = F)
temp.c = sapply(regions$AB.500K, FUN = length)
length(regions$AB.500K)
sum(temp.c != 1)
regions$AB.500K[1:2]
cnv.list = regions$AB.500K[temp.c == 1]
cnv.list
length(cnv.list)
length(regions$AB.500K) - length(cnv.list)
temp.str = '/home/user/Templates/DOC 文档.doc'
basename(temp.str)
temp.c = sapply(regions$AB.500K, FUN = length)
cnv.list = regions$AB.500K[temp.c == 1]
names(cnv.list) = NULL  # do.call won't work if have list name
cnv.gr = do.call('c', cnv.list)
cnv.gr = sort(cnv.gr)
data.frame(cnv.gr) %>% mutate(strand = NULL, width = NULL) %>% write_tsv('data/cnv.bed', col_names = F)
aneuploidy.ma = matrix(0, nrow = 0, ncol = 1*length(cnv.gr)) # columns are CNV/CNA of each 500K region
source('scripts/collect_bin_aneuploidy.R')
source('scripts/utils.R')
source('scripts/collect_bin_aneuploidy.R')
merge_cnr_cns <- function(cnr.file, cns.file) {
cnr.df = read_tsv(cnr.file, show_col_types = F)
cnr.gr = makeGRangesFromDataFrame(cnr.df, keep.extra.columns = T)
cns.df = read_tsv(cns.file, show_col_types = F)
cns.gr = makeGRangesFromDataFrame(cns.df, keep.extra.columns = T)
query.df = data.frame(findOverlaps(cns.gr, cnr.gr))
log2.df = data.frame(matrix(nrow = 0, ncol = 3))
for (i in 1:nrow(cnr.df)) {
#message(i)
if (i %in% query.df$subjectHits) {
index = match(i, query.df$subjectHits)
queryHits = query.df$queryHits[index]
if ('cn' %in% colnames(cns.df)) {
temp.df = cns.df[queryHits, c('log2', 'depth', 'weight', 'cn')]
} else {
temp.df = cns.df[queryHits, c('log2', 'depth', 'weight')]
}
log2.df = rbind(log2.df, temp.df)
} else {
log2.df = rbind(log2.df, NA)
}
}
colnames(log2.df) = c('log2.seg', 'depth.seg', 'weight.seg', 'cn')
result.df = cbind(cnr.df, log2.df)
return(result.df)
}
cnr.file = '~/server/data/projects/fragmentomics/temp/correct.cnr'
cns.file = '~/server/data/projects/fragmentomics/temp/segment.cns'
t
temp.df = merge_cnr_cns(cnr.file, cns.file)
dim(temp.df)
temp.df
file.remove('~/edtfwtrre.ttc')
file.remove('~/edtfwtrre.ttc', showWarnings = F)
tryCatch({file.remove('~/edtfwtrre.ttc')}, warning = function(e) e)
r = tryCatch({file.remove('~/edtfwtrre.ttc')}, warning = function(e) e)
r = tryCatch(file.remove('~/edtfwtrre.ttc'), warning = function(e) e)
r
r = tryCatch(file.remove('~/edtfwtrre.ttxc'), warning = function(e) e)
r
r = tryCatch(file.remove('~/edtfwtrre.ttxc', 'efwgerg'), warning = function(e) e)
r
r = tryCatch(file.remove('~/edtfwtrre.ttxc', '~/fgene-11-00486.pdf'), warning = function(e) e)
r
file.remove('~/edtfwtrre.ttxc', '~/fgene-11-00486.pdf')
r = tryCatch({file.remove('~/waeftew')
file.remove('~/rstb20120362.pdf')
},
warning = function(e) e)
r
r = tryCatch({file.remove('~/waeftew');
file.remove('~/rstb20120362.pdf')
},
warning = function(e) e)
r
r = tryCatch({file.remove('~/waeftew', '~/rstb20120362.pdf')
},
warning = function(e) e)
r
cnr.file = 'temp/correct.cnr'
cns.file = 'temp/segment.cns'
